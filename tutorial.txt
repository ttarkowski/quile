Tutorial
========

[This document might be slightly outdated.]

This tutorial is aimed  at the first-time Quilë library users  who would like to
understand library  basics. In order to  follow this tutorial you'll  need C++20
compiler, e.g.  GCC 10.2.0 or later,  and Git revision control  system. Examples
will be shown in GNU/Linux environment with GCC 10.2.0 installed.

Basics
======

Let us start with creating directory for programming projects:

  cd ~
  mkdir repos
  cd repos

Now, let us clone the Quilë library:

  git clone https://github.com/ttarkowski/quile.git

The directory  called quile should now  be present. Let us  create directory for
purpose of this tutorial:

  mkdir tutorial
  cd tutorial
  touch basic.cc

Open the  basic.cc file with your  favorite text editor and  enter the following
code:

  #include <quile/quile.h>
  
  using namespace quile;
  
  int main() {
  }

Save the file and then execute this compilation command:

  g++ -Wall -Wextra -pedantic -O3 -std=c++20 -pthread -I../quile/ basic.cc

Some Linux distributions might use  different naming convention and C++ compiler
might be called g++-10 — hence the compilation command is:

  g++-10 -Wall -Wextra -pedantic -O3 -std=c++20 -pthread -I../quile/ basic.cc

The meaning of flags being used is as follows:
• -Wall, -Wextra — enables warnings about some questionable code constructs
• -pedantic — forbids non-standard code to compile
• -O3 —  enables optimization  of result object  code (if you  are using  an old
  machine then you might want to omit  that flag to make compilation shorter and
  less resource demanding)
• -std=c++20 — selects C++20 standard
• -pthread — enables POSIX threads
• -I../quile/ — include path to the Quilë library

Compilation should  have finished  successfully and  you should  be now  able to
execute this empty example with following command:

  ./a.out

Of course, nothing happens. We'll fix that in next section.

Floating-point optimization problem
===================================

In  this  section  we'll  find  minimum   of  a  square  function  with  genetic
algorithm.  Yes, it  can be  done  much faster  by computing  derivative of  the
function and  comparing the result to  zero. But our  aim is not really  to find
minimum. Our aim  is to show how  it can be done in  evolutionary way, employing
the Quilë library. This section will show most of the essential library concepts
important from the user perspective.

We start with the definition of the square function:

  double square(double x) { return x * x; }

Next,  let us  describe domain  of the  function, ie.   the set  over which  the
function  is defined.   In  Quilë  library the  domain  is always  n-dimensional
hyperrectangle. Thus, in 1-dimensional example a range is what we need:

  const domain<double, 1> d{ range{ -10., +10. } };

The range [-10; +10] was chosen.

The  Quilë   library  can  be  used   to  solve  different  kind   of  problems:
floating-point,  integer,  binary or  permutation.  The  current problem  is  of
floating-point type, ie. the domain are real numbers (actually, usually IEEE-754
numbers). Thus we define the concrete genotype type in the following way:

  using G = genotype<g_floating_point<double, 1, &d>>;

The genotype  is a template class,  which can be parameterized  to represent any
type of aforementioned problems.

The  g_floating_point  type  is  designed   to  serve  the  floating-point  type
problems. This  type is parameterized with  type of gene (double  in this case),
dimensionality of the problem (1) and pointer to the domain (&d).

To sum up, the G type  is a floating-point-representation genotype consisting of
one gene only. This gene is  represented with double value, which is constrained
to [-10; +10] range.

The aforementioned  entities were defined in  global scope. Now, let  us go into
the main function.

First,  we initialize  two correlated  objects  — fitness  function and  fitness
function values database:

  const fitness_function<G> ff = [](const G& g) { return -square(g.value(0)); };
  const fitness_db<G> fd{ ff, constraints_satisfied<G> };

Please  note the  minus sign  in ff  lambda body  — it  is present,  because the
fitness function  is maximized in  genetic algorithm, while the  square function
has to  be minimized. The  g.value(0) instruction takes  first (ie. at  index 0)
element of genotype, ie. gene holding value from [-10; +10] range.

The  fd  object  is  actually  a  proxy to  a  database  storing  genotypes  and
corresponding   computed  fitness   function  values   for  given   optimization
problem.  This databse  object  is  required in  every  Quilë genetic  algorithm
program and  its instance is created  during creation of the  proxy. Please note
that copying proxy object does not imply copying database behing the proxy.

For  now  we'll skip  the  meaning  of the  second  argument  of the  fd  object
constructor.

Now  we  can  describe  the  process  of  creating  genotypes  (individuals)  in
algorithm. We will use fitness  proportional selection mechanism for calculating
selection probabilities:

  const fitness_proportional_selection<G> fps{ fd };

Parents will be selected with the use of stochastic universal sampling mechanism
(SUS):

  const auto p1 = stochastic_universal_sampling<G>{ fps };

We will use the same mechanism for selection to the next generation:

  const auto p2 = adapter<G>(stochastic_universal_sampling<G>{ fps });

Please note  that adapter<G> is  required, because it adapts  one-population SUS
function  object to  the two-population  case  required in  selection from  both
current generation and offspring.

Creation of first generation will be performed randomly:

  const auto p0 = random_population<constraints_satisfied<G>, G>;

Again,  like  in  case  of  fd  object,  we'll  skip  for  now  the  meaning  of
constraints_satisfied<G>.

Genetic algorithms tends to use fixed  size generations. Let us use 10 genotypes
in each generation:

  const std::size_t generation_sz{ 10 };

and two parents (one pair) in each generation:

  const std::size_t parents_sz{ 2 };

How to finish the whole algorithm? There  are number of strategies and we'll use
non-trivial, adaptable  pattern. If you want  to finish the algorithm  if in the
last 10 generations  the fitness function maximum has not  improved more than 5%
with respect to the whole history then use:

  const auto tc = max_fitness_improvement_termination<G>(fd, 10, 0.05);

For floating-point type algorithm we can use simple arithmetic recombination:

  const variation<G> v{ arithmetic_recombination<G> };

We are now ready to start the whole evolutionary process:

  evolution<G>(v, p0, p1, p2, tc, generation_sz, parents_sz);

When it finishes, the fitness database will be filled with genotypes and fitness
values corresponding  to these genotypes.  We can  easily get all  the genotypes
created during  algorithm, sorted from  the most fit to  the least fit  with the
following instruction:

  const auto rk = fd.rank_order();

Thus, the  approximation of x  minimizing the  square function can  be displayed
simply by invoking:

  std::cout << rk[0] << '\n';

The complete example is as follows:

  #include <iostream>
  #include <quile/quile.h>
  
  using namespace quile;
  
  double square(double x) { return x * x; }
  const domain<double, 1> d{ range{ -10., +10. } };
  using G = genotype<g_floating_point<double, 1, &d>>;
  
  int main() {
    const fitness_function<G> ff
      = [](const G& g) { return -square(g.value(0)); };
    const fitness_db<G> fd{ ff, constraints_satisfied<G> };
    const fitness_proportional_selection<G> fps{ fd };
    const auto p0 = random_population<constraints_satisfied<G>, G>;
    const auto p1 = stochastic_universal_sampling<G>{ fps };
    const auto p2 = adapter<G>(stochastic_universal_sampling<G>{ fps });
    const std::size_t generation_sz{ 10 };
    const std::size_t parents_sz{ 2 };
    const auto tc = max_fitness_improvement_termination<G>(fd, 10, 0.05);
    const variation<G> v{ arithmetic_recombination<G> };
    evolution<G>(v, p0, p1, p2, tc, generation_sz, parents_sz);
    const auto rk = fd.rank_order();
    std::cout << rk[0] << '\n';
  }

If you save this  file in ~/repos/tutorial/min.cc file then you  will be able to
compile and run  this example the same  way you did it for  basic.cc. The result
should be something like:

  -3.646061764598945e-01

Running the example program few more times might give following results:

  -5.115051697423212e-03  
  2.624032945367250e-02  
  -1.367241336503802e-01

Accuracy of the result is quite low as we have not tuned the algorithm.

(Next part of tutorial is under construction.)
