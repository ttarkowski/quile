                         * * * * * * * * * * *
                         * The Quilë library *
                         *    Tutorial       *
                         * * * * * * * * * * *

Introduction

  Welcome to the Quilë C++ genetic algorithms scientific library!

  This  tutorial  aims  at beginner  library users,   who already know
  basics of  the  genetic  algorithm (GA)  theory.   If you don't know
  foundations of the GA, then you can read about it from the following
  book:

    A. E. Eiben, J. E. Smith.  Introduction  to Evolutionary Computing.
    Second  Edition.  Natural  Computing  Series.  Berlin,  Heidelberg,
    Germany: Springer, 2015. doi: 10.1007/978-3-662-44874-8.

  The material of  the book  is  laid  down  in accessible manner  and
  knowledge  from Part I  is much more  than enough to understand this
  tutorial.  Mathematically inclined  readers  who would like to  read
  something short might refer to the following article:

    Tomasz Tarkowski.  Genetic algorithm formulation  and  tuning with
    use of  test  functions.  2022.  https://arxiv.org/abs/2210.03217 .

Table of contents

  1. Installation of the software
  2. Downloading the Quilë library
  3. Example program———Eight queens puzzle
  4. Structure of the program
  5. Example program———Function maximization
  6. Structure of the output
  7. Documentation

1. Installation of the software

  The following software will be needed:

    * Git revision control system
    * GCC C++ compiler supporting C++20 standard of the language

  It is  assumed,  that reader  has access  to the  personal  computer
  running  GNU/Linux  operating  system  or  has  enough knowledge  to
  translate following instructions  to the specific environment of the
  given operating system software in use.

  To install the software please use your distribution package manager.
  Before installing  any software  please read  your distribution  man
  pages documentation about package manager  (e.g. apt, dnf, pacman or
  zypper  to  name   a  few  package  managers    used   by  different
  distributions).  Please  also  check  if  you have  sudo  priviliges
  (please see sudo man page for details).

  Exercise: Find  and  install  Git  revision control system  and  C++
  # 1.1   : frontend of the GCC compiler.

2. Downloading the Quilë library

  It is assumed here that you have working Git revision control system
  software installed.

  Exercise: Please open the terminal and in your home directory create
  # 2.1   : the ``repos'' directory, if you haven't done it yet:
          :
          : $ cd ~ && mkdir repos

  Tip: The dollar ($) sign at the beginning of the line is not part of
       the command. It indicates the command prompt of the shell.

  Note: It is  assumed  that  you  use  the Bash shell,  which  can be
        checked with following command:

        $ echo ${SHELL}

        If the result is similar to following:
        
        > /bin/bash

        then your shell is indeed the Bash shell.

  Tip: The greater (>) sign  at  the beginning  of  the line  idicates
       command output.

  Exercise: Enter the  ``repos''  directory  and check  that you don't
  # 2.2   : have the directory or file named ``quile'':
          :
          : $ cd repos && ls
          : >
          :
          : If such directory  or  file  does not exist,  then you can
          : clone the newest version of the library:
          :
          : $ git clone https://github.com/ttarkowski/quile.git
          :
          : New directory named ``quile'' should appear after you type
          : ls command again:
          :
          : $ ls
          : > quile

3. Example program———Eight queens puzzle

  It is assumed here  that you have  working  C++ frontend of the  GCC
  compiler installed.

  Exercise: The Quilë library  requires  C++ compiler  supporting  the
  # 3.1   : C++20  standard of  the language.  Please check version of
          : the GCC software by running following command:
          :
          : $ g++ --version
          :
          : If your  g++ compiler version  is older than 10.2.1,  then
          : you  probably  should  consider  upgrading  your GNU/Linux
          : distribution.  See  your  distribution  website  for  more
          : details.

  Note: GCC compiler  version 10.2.1  is enough to follow  the rest of
        the tutorial.

  The eight queens puzzle is well known problem of placing eight chess
  queens on an standard (i.e. 8 x 8) chessboard  so that no two queens
  threaten each other. Here, the problem to solve,  is to generate any
  8 x 8 chessboard configuration satisfying the puzzle.

  Obviously,  no two queens can be placed  on the same row (column) as
  this violates  validity of the solution.  Hence, the problem  can be
  formulated as a some permutation puzzle.

  Let us start with  the view  on the empty 8 x 8 chessboard.  Usually,
  it is shown as in the Fig. 3.1.

      +---+---+---+---+---+---+---+---+
    8 |   |   |   |   |   |   |   |   |  Fig. 3.1.  View on  the empty
      +---+---+---+---+---+---+---+---+  8 x 8 chessboard.
    7 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    6 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    5 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    4 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    3 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    2 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
    1 |   |   |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
        a   b   c   d   e   f   g   h

  The  usual notation  of placing  pieces  on the chessboard  involves
  letter  from the set {a, ..., h}  followed by a number  from the set
  {1, ..., 9}, e.g. g5.  However,  for the purpose of the puzzle, this
  notation  can be adapted———with loss of generality———as shown in Fig.
  3.2 below.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+  Fig. 3.2.    View    on   the
      |   |   |   |   | Q |   |   |   |  chessboard  filled  with    8
      +---+---+---+---+---+---+---+---+  queens  equivalent   to   the
      | Q |   |   |   |   |   |   |   |  (4,  0,  7,  5, 2,  6, 1,  3)
      +---+---+---+---+---+---+---+---+  permutation.  This is example
      |   |   |   |   |   |   |   | Q |  solution  of the eight queens
      +---+---+---+---+---+---+---+---+  puzzle.
      |   |   |   |   |   | Q |   |   |
      +---+---+---+---+---+---+---+---+
      |   |   | Q |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
      |   |   |   |   |   |   | Q |   |
      +---+---+---+---+---+---+---+---+
      |   | Q |   |   |   |   |   |   |
      +---+---+---+---+---+---+---+---+
      |   |   |   | Q |   |   |   |   |
      +---+---+---+---+---+---+---+---+

  This figure demonstrates,  that whole chessboard with 8 queens on it
  can be encoded  into some permutation.  Let us start from the top of
  the figure,  i.e. from the highermost row.  The queen  at highermost
  row  is  put on the column  no. 4  (column numbering  starts from 0).
  The queen at the next row  is at the column no. 0.  Reader might now
  easily see,  that the whole example chessboard can be encoded as the
  following sequence:

    (4, 0, 7, 5, 2, 6, 1, 3)

  which  is   some  permutation   of  (0, ..., 7).   The   permutation
  formulation guarantees  that no two queens threaten each other along
  columns and rows.  However,  the diagonals (in chess meaning)  still
  pose a problem. How it can be solved programmatically?

  The eight queens puzzle can be formulated as an optimization problem.
  One can search for such  permutation (chessboard configuration) that
  minimizes  number of pairs  of queens threatening  each  other.  The
  solution of  the problem  has  number  of such pairs  equal  to zero.
  Fitness  function  can be defined  as  a negated  number of pairs of
  queens threatening  each other (fitness function in GA is maximized):

    f(given chessboard) = - (# of queen pairs threatening each other)

  The  complete  program  can  be  found   in  ``examples/example_2/''
  directory:

  $ less ~/repos/examples/example_2/example_2.cc

  Tip: Please use up and down arrows  to navigate through the document
       and `q` character key to leave ``less'' program.

  Note: There is no mistake. The first example in this tutorial really
        refers to the ``example_2'' from ``examples'' directory of the
        library.

  The source code will  be described  in details later.  At the moment
  it  is worth  to  mention  that  it  uses the swap mutation  and the
  cut-and-crossfill recombination as the variation operators,  fitness
  proportionate selection  with windowing procedure  as the  selection
  probability  function  and  stochastic  universal  sampling  as  the
  selection mechanism.

  Exercise: Compile and run the source code of the eight queens puzzle
  # 3.2   : example.
          :
          : $ cd ~/repos/examples/example_2/
          : $ g++ -std=c++20 -DNDEBUG -O3 -Wall -Wextra -pedantic \
          :     -I/home/${USER}/repos/quile/ -pthread example_2.cc
          : $ ./a.out

  Tip: Long shell commands  can be split into multiple lines  with use
       of '\' character.

  Tip: Shell variable ${USER} is set to the user login string:

       $ echo ${USER}
       > jdoe

  Tip: Default executable name is  a.out.  This can be changed with -o
       option of the compiler:

       $ ls
       > program.cc
       $ g++ program.cc -o program
       $ ls
       > program  program.cc
       $ ./program
       > Hello, world!

  Tip: The exercise  compilation example  uses multiple compiler flags.
       Meaning of each flag can be checked in man page of the compiler.
       Some explanations are also available here:
       
         * -std=c++20 selects C++20 standard of the language.
         * -DNDEBUG disables assertions for faster execution.
         * -O3 optimizes result code for performance.
         * -Wall and -Wextra turn on additional warnings.
         * -pedantic rejects non-standard (cf. -std= flag) behavior.
         * -I/home/${USER}/repos/quile/   includes  Quilë  library  in
            header file search path.
         * -pthread adds support for multithreading.

  Note: The Quilë  library  uses  multithreded  execution  for fitness
        function evaluations.

  After execution of  the program, you should see something similar to
  the following line:

  > 171 genotypes created in 113 generations.

  Moreover, in the working direcotory the ``solution.dat'' file should
  appear.  You can examine its content———it is encoded in FEN notation.
  Please note,  that Fig. 3.2 shows  one of the valid solutions of the
  eight queens puzzle, written in FEN as:

    4Q3/Q7/7Q/5Q2/2Q5/6Q1/1Q6/3Q4 w − − 0 0

  For more details about FEN, please see following article:

    Steven  J.  Edwards.  Portable  Game  Notation  Specification  and
    Implementation Guide. 1994.

  Note: There  are  92 solutions to  the eight queens puzzle  and  the
        solution  generated  by  your  run  of  the program  might  be
        different.

4. Structure of the program

  The  source code of  the eight queens puzzle  used  in  Sect. 3 is a
  representative  example of the use  of the library features.  Let us
  describe the details of the program.

  Tip: The source code  is described below step by step.  However, you
       might like to open  the source code in separate terminal to get
       a bigger picture of what is going on:

       $ cd ~/repos/quile/examples/example_2/
       $ less example_2.cc

  1 | #include <cassert>
  2 | #include <cstddef>
  3 | #include <fstream>
  4 | #include <iostream>
  5 | #include <string>
  6 | #include <quile/quile.h>

  Tip: Numbers on the left are line numbers of source code file.

  All the functionality of the library  is provided as one header file
  that can be easily included  in client-side source code  as shown in
  line 6.  Please remember to add proper  -I  flag  to the compilation
  command as outlines in Sect. 3.

  The functionality of the library is available in namespace ``quile''.
  In this example,  instead of repeating ``quile::'' before each token,
  using-directive is applied:

  7 | 
  8 | using namespace quile;
  9 | 

  Note: Use of  using-directive  in the  global scope  with effect for
        large  amount  of code  might  be  considered  as  a violation
        of some coding guidelines, but for the case of current (short)
        example it is acceptable.

  Tip: If you are looking for  some coding guidelines,  then C++ Core
       Guidelines is the place to start with:

         Bjarne Stroustrup, Herb Sutter (Editors). C++ Core Guidelines.
         https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines .
  
  10| using type = int;

  In the code snippet above,  the type ``type''  is stated to be equal
  to ``int''.  The  ``type'' type is actually used later as a base for
  permutation representation of genotype.

  It is good practice to use named constants instead of respective
  values (so-called ``magic constants''). In the line 11:

  11| const std::size_t n = 8;

  the constant ``n'' is defined as 8, for eight queens problem. If one
  would like to solve  e.g. 314 queens problem,  then it is sufficient
  to change  the ``n'' value in line 11,  to easily solve that problem.

  Tip: In large  source code bases  it is necessary  to use meaningful
       names for widely available entities. Instead of use of ``n'' it
       would    be   beneficial    to   use    something    like   e.g.
       ``linear_chessboard_size''. However,  for  the case of  current
       program, the name ``n'' is good enough.

  Tip: Avoid  ``magic constants''   i.e.  hard-coded  values   in your
       programs. Use real constants instead.

  Now it is good time to introduce fitness function:

  12|
  13| fitness f(const auto& chessboard)
  14| {
  15|   assert(n == chessboard.size());
  16|   int counts = 0;
  17|   for (std::size_t i = 0; i < n; ++i) {
  18|     for (std::size_t j = i + 1; j < n; ++j) {
  19|       const int d = j - i;
  20|       if (chessboard[i] == chessboard[j] ||
  21|           chessboard[i] + d == chessboard[j] ||
  22|           chessboard[i] == chessboard[j] + d) {
  23|         ++counts;
  24|       }
  25|     }
  26|   }
  27|   return -counts;
  28| }
  29| 

  This function calculates  how ``good'' is the given chessboard,  i.e.
  the lower the number of queens threating each other———the ``better''
  given chessboard is.

  Tip: The  ``quile::fitness''  type  is  a  floating-point  type  for
       holding fitness function values.

  Tip: The  ``chessboard''  variable  type  of  the  function ``f'' is
       deduced during compilation.

  Type of the genotype is represented by alias with name ``G'':

  30| using G = genotype<g_permutation<type, n, 0>>;

  This alias  states,  that  ``G''  is  the genotype  with permutation
  representation of length ``n'' (numbers from 0 to 7 are used).

  The FEN notation  is implemented for genotype type stated in line 30:

  31| 
  32| std::string Forsyth_Edwards_Notation(const G& g)
  33| {
  34|   std::string res{};
  35|   for (std::size_t i = 0; auto x : g) {
  36|     if (x != 0) {
  37|       res += std::to_string(x);
  38|     }
  39|     res += 'Q';
  40|     if (x != (n - 1)) {
  41|       res += std::to_string(n - 1 - x);
  42|     }
  43|     if (++i != n) {
  44|       res += '/';
  45|     }
  46|   }
  47|   res += " w - - 0 0";
  48|   return res;
  49| }
  50| 

  Note: This FEN implementation is constrained to the specific problem
        of the n queens puzzle.

  Finally, we have reached the ``main'' function:

  51| int main()
  52| {

  Tip: It is a good practice  to not exceed  80 characters in line  in
       source code as it increases readability.

  Note: This tutorial  uses  at most  71  of characters per line.  The
        library itself uses at most  80 characters per line.  To adapt
        between both standards, the '⤶' character is used.

  Tip: The '⤶' means  continuation of the current  line  of the source
       code.

  First, let us define the fitness function:

  53|   const fitness_function<G> ff = [](const G& g) { return f(g.da⤶
    | ta()); };

  Note: Yes, we have already defined  the fitness function named ``f''.
        However,  it was only convenient  ``helper implementation'' of
        the ``real'' fitness function named here ``ff''.

  Tip: The ``ff'' function is  a so-called ``lamda function'' and uses
       syntax with three kind of brackets: [], () and {}. If you don't
       know what  lambda function is,  then you can read about it from
       https://en.cppreference.com/w/cpp/language/lambda .

  The ``ff'' fitness functions  takes underlying representation of the
  genotype ``g''  with use of member function ``data'' and passes this
  representation as  the ``chessboard'' parameter  of the ``f'' helper
  fitness function.

  The Quilë library uses database of computed fitness function values:

  54|   const fitness_db<G> fd{ ff, constraints_satisfied<G> };

  Note: The use of the database  lowers  the computational cost,  when
        fitness function values are costly to obtain.

  Tip: At the moment  we will  leave  the ``constraints_satisfied<G>''
       code without explanation.

  This database is used in the next line of the program, where fitness
  proportional  selection  with windowing procedure  is chosen  as the
  selection probability function:

  55|   const fitness_proportional_selection<G> fps{ fd };

  Lines number 57, 58 and 59 describe  how to create  first generation,
  select parents and select genotypes to the next generation:

  56| 
  57|   const auto p0 = random_population<constraints_satisfied<G>, G⤶
    | >;
  58|   const auto p1 = stochastic_universal_sampling<G>{ fps };
  59|   const auto p2 = adapter<G>(stochastic_universal_sampling<G>{ ⤶
    | fps });
  60| 

  For the  purpose  of first generation creation,  random mechanism is
  used.  Selection of parents and to the next generation  is performed
  with use of the stochastic universal sampling.

  Note: ``adapter'' is  an implementation  of the flatten  (flat,  i.e.
        Italian bemolle)  function from the short article mentioned in
        the Introduction.

  The next two lines describe size of the generation  and  size of the
  multiset of parents.

  61|   const std::size_t generation_sz{ 20 };
  62|   const std::size_t parents_sz{ 2 };

  Tip: Size of the multiset of parents should be even number.

  One has to  determine termination condition of the genetic algorithm.
  The eight queens problem  is somehow unique in this regard,  because
  fitness function  value of  the solution is  known  a priori———it is
  equal to 0 (cf. second argument equal to 0.):

  63|   const auto tc = fitness_threshold_termination<G>(fd, 0., 0.01⤶
    | );

  Tip: Third argument of  the ``fitness_threshold_termination'' is the
       precision,  i.e. algorithm finishes  when genotype with fitness
       in range [-0.01, +0.01] is found.  This parameter  is therefore
       chosen arbitrarily to some extent.

  For   the   purpose   of   variation   operator,   cut-and-crossfill
  recombination followed by swap mutation was chosen:

  64| 
  65|   const variation<G> v{ swap_mutation<G>, cut_n_crossfill<G> };
  66| 

  Finally, we might perform evolution:

  67|   const auto e = evolution<G>(v, p0, p1, p2, tc, generation_sz,⤶
    |  parents_sz);

  and print results of the computations:

  68|   std::ofstream file{ "solution.dat" };
  69|   file << Forsyth_Edwards_Notation(fd.rank_order()[0]) << '\n';
  70|   std::cout << fd.size() << " genotypes created in " << e.size()
  71|             << " generations.\n";
  72| }

  Tip: ``rank_order'' method of the fitness database returns container
       with all generated genotypes  sorted in descending order of the
       fitness  function  values.   Therefore,  ``fd.rank_order()[0]''
       represents the best genotype.

  Exercise: Try to change  different parts of  the source code,  while
  # 4.1   : compiling and running it  after modifications.  Please see
          : the ``Tip''s below for some pieces of advice.
          :
          : Here are some suggestions:
          :
          :  * Try to change  variation  operator,  e.g. use only swap
          :    mutation.
          :  * What  happens   if  you  use   roulette_wheel_selection
          :    instead of stochastic_universal_sampling?
          :  * Change  the size of  the  chessboard (``n''  parameter).
          :    How does it affect the execution time?

  Tip: Some  modifications  of  the source code  done in  Exercise 4.1
       might  lead  to prolonged execution and/or excessive use of RAM.
       If you run into troubles, you can stop the program execution by
       pressing [Ctrl] + [C] combination of  the keys in terminal with
       running program.

  Tip: You can observe  parameters of  the running program with use of
       the ``top'' command. Please see man page of the top command for
       more details.

  Tip: You  might  want to  slightly change  the evolution command  to
       tackle with problem of excessive use of RAM. Try something like
       this:

         67|   const auto e = evolution<G>(v, p0, p1, p2, tc, generat⤶
           | ion_sz, parents_sz, 1);

       The addition of the last parameter (equal to 1) forces algoritm
       implementation  to  remeber  only  the last  generation  of the
       evolution.  This reduces the amount of  the RAM needed. However,
       this also makes statistical information printed by lines 70 and
       71 incorrect as the whole evolution is no longer kept in memory.

5. Example program———Function maximization

  One of the typical tasks in numerical methods is to find the maximum
  of some function. One can use e.g. ``golden section search'' (in one
  dimension) or ``conjugate gradient methods''. However, we'll see how
  to  use  the library  implementation of GA  for  finding  maximum of
  relatively simple function:

    f(x, y) = cos(sqrt(x^2 + y^2) / 4) + e

  over domain [-10, 10]^2.

  The  complete  program  can  be  found   in  ``examples/example_1/''
  directory:

  $ less ~/repos/examples/example_1/example_1.cc

  Instead  of  analyzing  the whole program,  which  is actually quite
  similar to  the  previous one,  we will  focus on the most important
  differences.

  First of all, this is floating-point optimization problem:

  8 | using type = double;

  and the helper fitness function implementation  is therefore defined
  as follows:

  11| fitness f(type x, type y)
  12| { return std::cos(0.25 * std::hypot(x, y)) + e<type>; }

  Tip: The Quilë library defines several math constants: e, pi and ln2.
       Example of use is shown above for the e constant.

  The problem is constrained to the domain [-10, 10] x [-10, 10]. This
  is reflected in code in natural way:

  16|   static const domain<type, dim> d{ range{ -10., +10. }, range{⤶
    |  -10., +10. } };
  17|   using G = genotype<g_floating_point<type, dim, &d>>;

  Note: The genotype type  has access  to the domain  information  (cf.
        third template parameter of g_floating_point template.

  Note: The g_floating_point template  indicates,  that the problem is
        indeed floating-point in its nature.

  This time, the termination condition is stated differently:

  30|   const auto tc = max_fitness_improvement_termination<G>(fd, 10⤶
    | , 0.05);

  The algorithm  is terminated  if after  10 last generations  fitness
  function  maximum  has not  improved  relatively  more than  5% with
  respect to the whole evolutionary process.

  For the purpose of the variation  the Gaussian mutation is used this
  time:

  32|   const type sigma{ .2 };
  33|   const variation<G> v{ Gaussian_mutation<G>(sigma, 1.) };

  To save the whole evolution  into a file  the ``print'' function can
  be used:

  35|   std::ofstream file{ "evolution.dat" };
  36|   print(file, evolution<G>(v, p0, p1, p2, tc, generation_sz, pa⤶
    | rents_sz));

  Exercise: Compile and run source code described in this section (i.e.
  # 5.1   : from   directory   ``examples/example_1/'').    Open   the
          : ``evolution.dat''  file with  the less command and examine
          : its content.

6. Structure of the output

  In  the  eight queens  example  from Sect. 3  we were  intersted  in
  obtaining solution  to the puzzle.  Sometimes, however,  the genetic
  drift might be interesting  as well.  We will try to visualize drift
  of the maximization example from Sect. 5.

  It is assumed here, that you have done Exercise 5.1.

  The  ``evolution.dat''  file created during execution of the genetic
  program from  Sect. 5  is quite lengthy.  However,  its structure is
  very simple and can be easily processed further.

  Columns description:

    * The first column  represents the number of the generation in the
      evolution. Counting starts from 0.
    * Rest of the columns represent alleles (values of the genes).

  There are  multiple tools,  which  can be used  to visualize genetic
  drift. Here, the gnuplot program will be used.

  Tip: The  gnuplot visualization program  is a gem of  the scientific
       software. It can be effectively combined with LaTeX through the
       use  of  epslatex  terminal  to  produce  beautiful  scientific
       drawings.  However,  it takes some time  and  effort to achieve
       adequate level of proficiency. You can learn more about gnuplot
       from http://gnuplot.info/ .

  Exercise: With use of the package manager,  please find  and install
  # 6.1   : package containing gnuplot visualization program.

  Use of the gnuplot program in this tutorial will be slightly unusual.
  We will call  gnuplot  from  the Bash  script feeding it  with  data
  filtered  with use of the grep command.  The  awk  command  will  be
  useful as well.

  Tip: Data analysis can be performed with multiple tools or according
       to different philosophies.  Here,  the command line  tools  and
       some tenets of the philosophy described here:

         http://www.catb.org/esr/writings/taoup/html/ch01s06.html

       are applied.

  Tip: The awk,  grep  and  sed  commands  can be conveniently used to
       analyze data.

  Exercise: Please read  the source code of  the ``postprocessing.sh''
  # 6.2   : file from the ``examples/example_1'' directory.

  From the source code of the  ``postprocessing.sh''  shell script you
  can see,  that  the  main  job  is done  in  a loop  iterating  over
  evolution generation numbers:

  7 | for i in `cat evolution.dat | awk '{ print $1 }' | uniq`
  8 | do
  ...
  31| done

  Extraction of the population from i-th generation is done with  grep
  command:

  9 |   cat ${file} | grep "^${i} " > ${temp}

  Then,  data  for  the i-th  generation  is visualized  as a separate
  drawing with use of the gnuplot program.

  Tip: For introduction  to  the programming  in Bash  please  see the
       following on-line resource:

         Mendel Cooper.   Advanced Bash-Scripting Guide.    2012, 2014.
         https://tldp.org/LDP/abs/html/ .

  Exercise: Run   the  ``postprocessing.sh''  shell  script  from  the
  # 6.3   : ``examples/example_1'' directory.
          :
          : chmod u+x postprocessing.sh
          : $ ./postprocessing.sh

  Tip: Execution of ``postprocessing.sh'' file might take a while. The
       result  of the execution is  the set of PNG files  that  can be
       viewed in some image viewer.

  Note: The resulting series of pictures  can be encoded  into a movie.
        For  this  task,  software  like  GStreamer  can be used.  The
        example command using OGV format is as follows:

        $ gst-launch-1.0 -e multifilesrc location="%03d.png" \
            index=0 caps="image/png,framerate=(fraction)10/1" \
            ! pngdec ! videoconvert ! theoraenc ! oggmux \
            ! filesink location=result.ogv

        In order to use ``gst-launch-1.0'' command,  you will probably
        need to install appropriate GStreamer package with use of your
        package manager.

        The video is very short———you might need to replay it  several
        times to see what is going on.

  At this momemt you have images (or video) of genetic drift available
  to show to somebody!

7. Documentation

  Documentation of the API  can be  generated from  the source code of
  the library  with use of the Doxygen tool,  LaTeX typesetting system
  and GNU Make program.

  Exercise: Find and install Doxygen,  LaTeX  and GNU Make with use of
  # 7.1   : your package manager.

  Exercise: Generate the documentation:
  # 7.2   :
          : $ cd ~/repos/quile
          : $ doxygen
          : $ cd doc/latex/
          : $ make
          : $ open refman.pdf

  If everything goes without problems, a window with the generated PDF
  file should open.

  Exercise: Find  some information  about permutation,  floating-point,
  # 7.3   : binary and integer representations of genotype.

  Tip: Genotype  representations   are  defined   with   use   of  the
       ``g_permutation'',   ``g_floating_point'',   ``g_binary''   and
       ``g_integer'' structures.

                                * * *

Congratulations! You have completed the tutorial.  Now you are able to
write genetic algorithm programs with use of the Quilë library.
